// Generated by purs bundle 0.14.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  exports["bind"] = bind;
  exports["composeKleisli"] = composeKleisli;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  exports["range"] = $foreign.range;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  exports["for_"] = for_;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeForeignProcedure = function(args) {
      return function (stmt) {
          return Function(wrap(args.slice()))();
          function wrap() {
              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
          }
      };
  };
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foreign.EasyFFI"] = $PS["Data.Foreign.EasyFFI"] || {};
  var exports = $PS["Data.Foreign.EasyFFI"];
  var $foreign = $PS["Data.Foreign.EasyFFI"];
  var unsafeForeignFunction = function (args) {
      return function (expr) {
          return $foreign.unsafeForeignProcedure(args)("return " + (expr + ";"));
      };
  };
  exports["unsafeForeignFunction"] = unsafeForeignFunction;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showInt = {
      show: $foreign.showIntImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];                  
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];              
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Foreign.Object (line 209, column 15 - line 211, column 25): " + [ v.constructor.name ]);
          };
      };
  };
  exports["lookup"] = lookup;
  exports["alter"] = alter;
  exports["empty"] = $foreign.empty;
})(PS);
(function(exports) {
  "use strict";

  // This function transforms the functions in the "create" and "preload"
  // namespaces into functions that receive "themselves"(this) when executed.
  function mapThis(obj) {
    var newObj = {};
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        newObj[key.toString()] = function () {
          obj[key](this)();
        };
      }
    }
    return newObj;
  }

  exports.createImpl = function (config) {
    if (config.scene != undefined) {
      config.scene = mapThis(config.scene);
    }
    return new Phaser.Game(config);
  };
})(PS["Graphics.Phaser"] = PS["Graphics.Phaser"] || {});
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Option"] = $PS["Option"] || {};
  var exports = $PS["Option"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record_1 = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];                      
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  var required = function (record$prime) {
      return record$prime.required;
  };
  var recordFromRecordAndOption = function (record) {
      return {
          optional: record.optional,
          required: record.required
      };
  };
  var optional = function (record$prime) {
      return record$prime.optional;
  };
  var fromRecordRequiredNil = {
      fromRecordRequired: function (v) {
          return function (v1) {
              return Control_Category.identity(Record_Builder.categoryBuilder);
          };
      }
  };
  var fromRecordRequired = function (dict) {
      return dict.fromRecordRequired;
  };
  var fromRecordOption = function (dict) {
      return dict.fromRecordOption;
  };
  var fromRecordAny = function (dictFromRecordOption) {
      return function (dictFromRecordRequired) {
          return function (dictUnion) {
              return function (dictRowToList) {
                  return function (dictRowToList1) {
                      return {
                          "fromRecord'": function (record) {
                              return recordFromRecordAndOption({
                                  optional: fromRecordOption(dictFromRecordOption)($$Proxy.value)(record),
                                  required: Record_Builder.build(fromRecordRequired(dictFromRecordRequired)($$Proxy.value)(record))({})
                              });
                          }
                      };
                  };
              };
          };
      };
  };
  var fromRecord$prime = function (dict) {
      return dict["fromRecord'"];
  };
  var fromRecord = function (dictFromRecord) {
      return function (record$prime) {
          var record = fromRecord$prime(dictFromRecord)(record$prime);
          return optional(record);
      };
  };
  var empty = Foreign_Object.empty;
  var fromRecordOptionNil = {
      fromRecordOption: function (v) {
          return function (v1) {
              return empty;
          };
      }
  };
  var alter$prime$prime = function (dict) {
      return dict["alter''"];
  };
  var alter$prime = function (dictIsSymbol) {
      return function (f) {
          return function (v) {
              return function (v1) {
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                  var go = function (value$prime) {
                      return f(value$prime);
                  };
                  var option = Foreign_Object.alter(go)(key)(v1);
                  var value = f(Foreign_Object.lookup(key)(v1));
                  return {
                      option: option,
                      value: value
                  };
              };
          };
      };
  };                                     
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (proxy) {
              return function (option) {
                  var go = function (value) {
                      return value;
                  };
                  return (alter$prime(dictIsSymbol)(go)(proxy)(option)).value;
              };
          };
      };
  };
  var insert = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictLacks) {
              return function (proxy) {
                  return function (value) {
                      return function (option) {
                          var go = function (v) {
                              return new Data_Maybe.Just(value);
                          };
                          return (alter$prime(dictIsSymbol)(go)(proxy)(option)).option;
                      };
                  };
              };
          };
      };
  };
  var fromRecordOptionCons = function (dictIsSymbol) {
      return function (dictFromRecordOption) {
          return function (dictCons) {
              return function (dictCons1) {
                  return function (dictLacks) {
                      return {
                          fromRecordOption: function (v) {
                              return function (record) {
                                  var option = fromRecordOption(dictFromRecordOption)($$Proxy.value)(record);
                                  var value = Record_1.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(record);
                                  return insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(value)(option);
                              };
                          }
                      };
                  };
              };
          };
      };
  };                                           
  var alter = function (dictAlter) {
      return function (record) {
          return function (option) {
              return alter$prime$prime(dictAlter)(record)(option);
          };
      };
  };
  exports["fromRecord"] = fromRecord;
  exports["fromRecordAny"] = fromRecordAny;
  exports["fromRecordOptionNil"] = fromRecordOptionNil;
  exports["fromRecordOptionCons"] = fromRecordOptionCons;
  exports["fromRecordRequiredNil"] = fromRecordRequiredNil;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser"] = $PS["Graphics.Phaser"] || {};
  var exports = $PS["Graphics.Phaser"];
  var $foreign = $PS["Graphics.Phaser"];
  var Option = $PS["Option"];
  var create = function (dictFromRecord) {
      return function (config) {
          return function () {
              return $foreign.createImpl(Option.fromRecord(dictFromRecord)(config));
          };
      };
  };
  exports["create"] = create;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Utils.FFI"] = $PS["Utils.FFI"] || {};
  var exports = $PS["Utils.FFI"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var get = function (name) {
      return function (obj) {
          return Data_Foreign_EasyFFI.unsafeForeignFunction([ "obj", "" ])("obj." + name)(obj);
      };
  };
  var argsN = function (n) {
      var values = (function () {
          var $0 = n < 1;
          if ($0) {
              return [  ];
          };
          return Data_Functor.map(Data_Functor.functorArray)(function (i) {
              return "v" + Data_Show.show(Data_Show.showInt)(i);
          })(Data_Array.range(1)(n));
      })();
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(values)([ "obj", "" ]);
  };
  var return0 = function (expr) {
      return function (obj) {
          return Data_Foreign_EasyFFI.unsafeForeignFunction(argsN(0))("obj." + expr)(obj);
      };
  };
  var method0 = function (expr) {
      return function (obj) {
          return function __do() {
              Data_Functor["void"](Effect.functorEffect)(return0(expr)(obj))();
              return obj;
          };
      };
  };
  var return1 = function (expr) {
      return function (v1) {
          return function (obj) {
              return Data_Foreign_EasyFFI.unsafeForeignFunction(argsN(1))("obj." + expr)(v1)(obj);
          };
      };
  };
  var getNullable = function (expr) {
      return function (obj) {
          return return1(expr)(obj);
      };
  };
  var safeGet = function (k) {
      return function (obj) {
          return function __do() {
              var v = getNullable("children.getByName(v1)")(k)(obj)();
              return Data_Nullable.toMaybe(v);
          };
      };
  };
  var method1 = function (expr) {
      return function (value) {
          return function (obj) {
              return function __do() {
                  Data_Functor["void"](Effect.functorEffect)(return1(expr)(value)(obj))();
                  return obj;
              };
          };
      };
  };
  var return2 = function (expr) {
      return function (v1) {
          return function (v2) {
              return function (obj) {
                  return Data_Foreign_EasyFFI.unsafeForeignFunction(argsN(2))("obj." + expr)(v1)(v2)(obj);
              };
          };
      };
  };
  var method2 = function (expr) {
      return function (v1) {
          return function (v2) {
              return function (obj) {
                  return function __do() {
                      Data_Functor["void"](Effect.functorEffect)(return2(expr)(v1)(v2)(obj))();
                      return obj;
                  };
              };
          };
      };
  };
  var return3 = function (expr) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (obj) {
                      return Data_Foreign_EasyFFI.unsafeForeignFunction(argsN(3))("obj." + expr)(v1)(v2)(v3)(obj);
                  };
              };
          };
      };
  };
  var method3 = function (expr) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (obj) {
                      return function __do() {
                          Data_Functor["void"](Effect.functorEffect)(return3(expr)(v1)(v2)(v3)(obj))();
                          return obj;
                      };
                  };
              };
          };
      };
  };
  var return4 = function (expr) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (v4) {
                      return function (obj) {
                          return Data_Foreign_EasyFFI.unsafeForeignFunction(argsN(4))("obj." + expr)(v1)(v2)(v3)(v4)(obj);
                      };
                  };
              };
          };
      };
  };
  exports["return0"] = return0;
  exports["method0"] = method0;
  exports["return1"] = return1;
  exports["method1"] = method1;
  exports["return2"] = return2;
  exports["method2"] = method2;
  exports["return3"] = return3;
  exports["method3"] = method3;
  exports["return4"] = return4;
  exports["get"] = get;
  exports["safeGet"] = safeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.ArcadePhysics"] = $PS["Graphics.Phaser.ArcadePhysics"] || {};
  var exports = $PS["Graphics.Phaser.ArcadePhysics"];
  var Utils_FFI = $PS["Utils.FFI"];                                                                    
  var setVelocityY = function (dictPhysicsEnabled) {
      return Utils_FFI.method1("body.setVelocityY(v1)");
  };
  var setVelocityX = function (dictPhysicsEnabled) {
      return Utils_FFI.method1("body.setVelocityX(v1)");
  };
  var setImmovable = function (dictPhysicsEnabled) {
      return Utils_FFI.method1("setImmovable(v1)");
  };
  var setCollideWorldBounds = function (dictPhysicsEnabled) {
      return Utils_FFI.method1("setCollideWorldBounds(v1)");
  };
  var setBounce = function (dictPhysicsEnabled) {
      return Utils_FFI.method1("body.setVelocityY(v1)");
  };
  var setAllowGravity = function (dictPhysicsEnabled) {
      return Utils_FFI.method1("body.setAllowGravity(v1)");
  };
  var refreshBody = function (dictPhysicsEnabled) {
      return Utils_FFI.method0("refreshBody()");
  };
  var getTouching = function (dictPhysicsEnabled) {
      return Utils_FFI.get("body.touching");
  };
  var disableBody = function (dictPhysicsEnabled) {
      return Utils_FFI.method0("disableBody(true,true)");
  };
  var createStaticGroup = Utils_FFI.return0("physics.add.staticGroup()");
  var createGroup = Utils_FFI.return0("physics.add.group()");
  var createChild = function (dictArcadeGroup) {
      return Utils_FFI.return2("create(v1.x,v1.y,v2)");
  };
  var createArcadeSprite = Utils_FFI.return2("physics.add.sprite(v1.x,v1.y,v2)");
  var createArcadeImage = Utils_FFI.return2("physics.add.image(v1.x,v1.y,v2)");
  var addOverlap = function (dictCollidable) {
      return function (dictCollidable1) {
          return function (dictCollidable2) {
              return function (dictCollidable3) {
                  return Utils_FFI.method3("physics.add.overlap(v1,v2,(a,b)=>v3(a)(b)())");
              };
          };
      };
  };
  var addCollider = function (dictCollidable) {
      return function (dictCollidable1) {
          return Utils_FFI.method2("physics.add.collider(v1,v2)");
      };
  };
  exports["createStaticGroup"] = createStaticGroup;
  exports["createGroup"] = createGroup;
  exports["createChild"] = createChild;
  exports["createArcadeImage"] = createArcadeImage;
  exports["createArcadeSprite"] = createArcadeSprite;
  exports["refreshBody"] = refreshBody;
  exports["setImmovable"] = setImmovable;
  exports["setAllowGravity"] = setAllowGravity;
  exports["setVelocityX"] = setVelocityX;
  exports["setVelocityY"] = setVelocityY;
  exports["setBounce"] = setBounce;
  exports["setCollideWorldBounds"] = setCollideWorldBounds;
  exports["addCollider"] = addCollider;
  exports["getTouching"] = getTouching;
  exports["addOverlap"] = addOverlap;
  exports["disableBody"] = disableBody;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.GameObject"] = $PS["Graphics.Phaser.GameObject"] || {};
  var exports = $PS["Graphics.Phaser.GameObject"];
  var Utils_FFI = $PS["Utils.FFI"];
  var setScale = function (dictTransform) {
      return Utils_FFI.method1("setScale(v1.x,v1.y)");
  };
  var setPosition = function (dictTransform) {
      return Utils_FFI.method1("setPosition(v1.x,v1.y)");
  };
  var setName = function (dictGameObject) {
      return Utils_FFI.method1("setName(v1)");
  };
  var getX = function (dictTransform) {
      return Utils_FFI.get("x");
  };
  exports["getX"] = getX;
  exports["setPosition"] = setPosition;
  exports["setScale"] = setScale;
  exports["setName"] = setName;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.Image"] = $PS["Graphics.Phaser.Image"] || {};
  var exports = $PS["Graphics.Phaser.Image"];
  var Utils_FFI = $PS["Utils.FFI"];                
  var create = Utils_FFI.return1("add.image(0, 0, v1)");
  exports["create"] = create;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.Input"] = $PS["Graphics.Phaser.Input"] || {};
  var exports = $PS["Graphics.Phaser.Input"];
  var Utils_FFI = $PS["Utils.FFI"];
  var isDown = Utils_FFI.get("isDown");                                   
  var createCursorKeys = Utils_FFI.return0("input.keyboard.createCursorKeys()");
  exports["createCursorKeys"] = createCursorKeys;
  exports["isDown"] = isDown;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.Loader"] = $PS["Graphics.Phaser.Loader"] || {};
  var exports = $PS["Graphics.Phaser.Loader"];
  var Utils_FFI = $PS["Utils.FFI"];                                           
  var loadSpritesheet = Utils_FFI.method3("load.spritesheet(v1,v2,v3)");
  var loadImage = Utils_FFI.method1("load.image(v1.key,v1.path)");
  exports["loadImage"] = loadImage;
  exports["loadSpritesheet"] = loadSpritesheet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.Scene"] = $PS["Graphics.Phaser.Scene"] || {};
  var exports = $PS["Graphics.Phaser.Scene"];
  var Utils_FFI = $PS["Utils.FFI"];              
  var getChildByName = function (dictGameObject) {
      return Utils_FFI.safeGet;
  };
  exports["getChildByName"] = getChildByName;
})(PS);
(function(exports) {
  "use strict";

  // TODO: put this in a `util` module
  function mapThis(obj) {
    var newObj = {};
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        newObj[key.toString()] = function () {
          obj[key](this)();
        };
      }
    }
    return newObj;
  }

  exports.addSceneImpl = function (key, sceneConfig, autoStart, game) {
    // Map only the existing fields into calls taking `this` which is the
    // PhaserScene.
    // TODO: replace with `mkEffectFn1`
    return game.scene.add(key, mapThis(sceneConfig), autoStart);
  };
})(PS["Graphics.Phaser.SceneManager"] = PS["Graphics.Phaser.SceneManager"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.SceneManager"] = $PS["Graphics.Phaser.SceneManager"] || {};
  var exports = $PS["Graphics.Phaser.SceneManager"];
  var $foreign = $PS["Graphics.Phaser.SceneManager"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Option = $PS["Option"];                      
  var Start = (function () {
      function Start() {

      };
      Start.value = new Start();
      return Start;
  })();
  var NoStart = (function () {
      function NoStart() {

      };
      NoStart.value = new NoStart();
      return NoStart;
  })();                                              
  var addScene = function (dictFromRecord) {
      return function (key) {
          return function (sceneConfig) {
              return function (autoStart) {
                  return function (game) {
                      var start = (function () {
                          if (autoStart instanceof Start) {
                              return true;
                          };
                          if (autoStart instanceof NoStart) {
                              return false;
                          };
                          throw new Error("Failed pattern match at Graphics.Phaser.SceneManager (line 101, column 15 - line 103, column 25): " + [ autoStart.constructor.name ]);
                      })();
                      return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
                          return $foreign.addSceneImpl(key, Option.fromRecord(dictFromRecord)(sceneConfig), start, game);
                      });
                  };
              };
          };
      };
  };
  exports["addScene"] = addScene;
  exports["Start"] = Start;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Phaser.Sprite"] = $PS["Graphics.Phaser.Sprite"] || {};
  var exports = $PS["Graphics.Phaser.Sprite"];
  var Utils_FFI = $PS["Utils.FFI"];                           
  var playAnimation = function (dictSprite) {
      return Utils_FFI.method1("anims.play(v1.key,v1.ignoreIfPlaying)");
  };
  var generateFrameNumbers = Utils_FFI.return3("anims.generateFrameNumbers(v1, {start: v2, end: v3})");
  var createAnimation = Utils_FFI.return4("anims.create({ key: v1, frames: v2, frameRate: v3, repeat: v4, })");
  exports["createAnimation"] = createAnimation;
  exports["playAnimation"] = playAnimation;
  exports["generateFrameNumbers"] = generateFrameNumbers;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Graphics_Phaser = $PS["Graphics.Phaser"];
  var Graphics_Phaser_ArcadePhysics = $PS["Graphics.Phaser.ArcadePhysics"];
  var Graphics_Phaser_GameObject = $PS["Graphics.Phaser.GameObject"];
  var Graphics_Phaser_Image = $PS["Graphics.Phaser.Image"];
  var Graphics_Phaser_Input = $PS["Graphics.Phaser.Input"];
  var Graphics_Phaser_Loader = $PS["Graphics.Phaser.Loader"];
  var Graphics_Phaser_Scene = $PS["Graphics.Phaser.Scene"];
  var Graphics_Phaser_SceneManager = $PS["Graphics.Phaser.SceneManager"];
  var Graphics_Phaser_Sprite = $PS["Graphics.Phaser.Sprite"];
  var Option = $PS["Option"];                
  var stop = function (dictPhysicsEnabled) {
      return function (dictSprite) {
          return Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.setVelocityX()(0.0))(Graphics_Phaser_Sprite.playAnimation()({
              key: "turn",
              ignoreIfPlaying: false
          }));
      };
  };
  var moveRight = function (dictPhysicsEnabled) {
      return function (dictSprite) {
          return Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.setVelocityX()(150.0))(Graphics_Phaser_Sprite.playAnimation()({
              key: "right",
              ignoreIfPlaying: true
          }));
      };
  };
  var moveLeft = function (dictPhysicsEnabled) {
      return function (dictSprite) {
          return Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.setVelocityX()(-150.0))(Graphics_Phaser_Sprite.playAnimation()({
              key: "left",
              ignoreIfPlaying: true
          }));
      };
  };
  var move = function (dictPhysicsEnabled) {
      return function (dictSprite) {
          return function (cursors) {
              return function (sprite) {
                  return function __do() {
                      var isRight$prime = Graphics_Phaser_Input.isDown(cursors.right)();
                      var isLeft$prime = Graphics_Phaser_Input.isDown(cursors.left)();
                      if (isRight$prime) {
                          return moveRight()()(sprite)();
                      };
                      if (isLeft$prime) {
                          return moveLeft()()(sprite)();
                      };
                      return stop()()(sprite)();
                  };
              };
          };
      };
  };
  var jump = function (dictPhysicsEnabled) {
      return function (dictSprite) {
          return Graphics_Phaser_ArcadePhysics.setVelocityY()(-350.0);
      };
  };
  var getPlayer = function (scene) {
      return Graphics_Phaser_Scene.getChildByName()("player")(scene);
  };
  var getPlatform = function (scene) {
      return Graphics_Phaser_Scene.getChildByName()("moving_platform")(scene);
  };
  var update = function (scene) {
      return function __do() {
          var cursors = Graphics_Phaser_Input.createCursorKeys(scene)();
          var player = getPlayer(scene)();
          (function () {
              if (player instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(function __do() {
                      var touching = Graphics_Phaser_ArcadePhysics.getTouching()(player.value0)();
                      var isUp$prime = Graphics_Phaser_Input.isDown(cursors.up)();
                      Data_Functor["void"](Effect.functorEffect)(move()()(cursors)(player.value0))();
                      var $13 = isUp$prime && touching.down;
                      if ($13) {
                          return jump()()(player.value0)();
                      };
                      return player.value0;
                  })();
              };
              if (player instanceof Data_Maybe.Nothing) {
                  return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Sprite not found!")();
              };
              throw new Error("Failed pattern match at Main (line 142, column 3 - line 152, column 39): " + [ player.constructor.name ]);
          })();
          var platform = getPlatform(scene)();
          (function () {
              if (platform instanceof Data_Maybe.Just) {
                  var x = Graphics_Phaser_GameObject.getX()(platform.value0)();
                  (function () {
                      var $16 = x >= 500.0;
                      if ($16) {
                          return Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_ArcadePhysics.setVelocityX()(-50.0)(platform.value0))();
                      };
                      return Data_Unit.unit;
                  })();
                  var $17 = x <= 300.0;
                  if ($17) {
                      return Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_ArcadePhysics.setVelocityX()(50.0)(platform.value0))();
                  };
                  return Data_Unit.unit;
              };
              if (platform instanceof Data_Maybe.Nothing) {
                  return Effect_Class_Console.log(Effect_Class.monadEffectEffect)("Platform image not found!")();
              };
              throw new Error("Failed pattern match at Main (line 154, column 3 - line 165, column 47): " + [ platform.constructor.name ]);
          })();
          return Data_Unit.unit;
      };
  };
  var createStars = function (scene) {
      return function __do() {
          var group = Graphics_Phaser_ArcadePhysics.createGroup(scene)();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Data_Array.range(1)(15))(function (n) {
              return Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.createChild()({
                  x: 50.0 + Data_Int.toNumber(n) * 40.0,
                  y: 100.0
              })("star")(group))(Graphics_Phaser_ArcadePhysics.setBounce()(0.4)))(Graphics_Phaser_ArcadePhysics.setCollideWorldBounds()(true));
          })();
          return group;
      };
  };
  var createPlayer = function (scene) {
      return Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.createArcadeSprite({
          x: 50.0,
          y: 500.0
      })("dude")(scene))(Graphics_Phaser_ArcadePhysics.setBounce()(0.4)))(Graphics_Phaser_ArcadePhysics.setCollideWorldBounds()(true)))(Graphics_Phaser_GameObject.setName()("player"));
  };
  var createPlatform = function (scene) {
      return Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.createArcadeImage({
          x: 400.0,
          y: 400.0
      })("platform")(scene))(Graphics_Phaser_ArcadePhysics.setImmovable()(true)))(Graphics_Phaser_ArcadePhysics.setAllowGravity()(false)))(Graphics_Phaser_ArcadePhysics.setVelocityX()(50.0)))(Graphics_Phaser_GameObject.setName()("moving_platform"));
  };
  var createGround = function (group) {
      return Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.createChild()({
          x: 400.0,
          y: 568.0
      })("platform")(group))(Graphics_Phaser_GameObject.setScale()({
          x: 2.0,
          y: 2.0
      })))(Graphics_Phaser_ArcadePhysics.refreshBody());
  };
  var createBg = Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Phaser_Image.create("sky"))(Graphics_Phaser_GameObject.setPosition()({
      x: 400.0,
      y: 300.0
  }));
  var createAnimations = function (scene) {
      return function __do() {
          var leftWalkFrames = Graphics_Phaser_Sprite.generateFrameNumbers("dude")(0)(3)(scene)();
          var rightWalkFrames = Graphics_Phaser_Sprite.generateFrameNumbers("dude")(5)(8)(scene)();
          Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_Sprite.createAnimation("left")(leftWalkFrames)(10.0)(-1 | 0)(scene))();
          Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_Sprite.createAnimation("turn")([ {
              key: "dude",
              frame: 4
          } ])(10.0)(-1 | 0)(scene))();
          return Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_Sprite.createAnimation("right")(rightWalkFrames)(10.0)(-1 | 0)(scene))();
      };
  };
  var collectStar = function (_a) {
      return function (b) {
          return Control_Bind.bind(Effect.bindEffect)(Graphics_Phaser_ArcadePhysics.disableBody()(b))(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)));
      };
  };
  var create = function (scene) {
      return function __do() {
          Data_Functor["void"](Effect.functorEffect)(createBg(scene))();
          var platforms = Graphics_Phaser_ArcadePhysics.createStaticGroup(scene)();
          var _ground = createGround(platforms)();
          var movingPlatform = createPlatform(scene)();
          var player = createPlayer(scene)();
          createAnimations(scene)();
          var stars = createStars(scene)();
          Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_ArcadePhysics.addCollider()()(player)(platforms)(scene))();
          Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_ArcadePhysics.addCollider()()(player)(movingPlatform)(scene))();
          Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_ArcadePhysics.addCollider()()(stars)(movingPlatform)(scene))();
          Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_ArcadePhysics.addCollider()()(stars)(platforms)(scene))();
          Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_ArcadePhysics.addOverlap()()()()(player)(stars)(collectStar)(scene))();
          return Data_Unit.unit;
      };
  };
  var basePath = "https://raw.githubusercontent.com/photonstorm/phaser3-examples/master/public/src/games/firstgame/assets/";
  var preload = function (scene) {
      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)([ "sky", "platform", "star" ])(function (key) {
          return function __do() {
              Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_Loader.loadImage({
                  key: key,
                  path: basePath + (key + ".png")
              })(scene))();
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Phaser_Loader.loadSpritesheet("dude")(basePath + "dude.png")({
                  frameWidth: 32.0,
                  frameHeight: 48.0,
                  startFrame: 0,
                  endFrame: 8,
                  margin: 0,
                  spacing: 0
              })(scene))();
          };
      });
  };
  var main = Data_Functor["void"](Effect.functorEffect)(function __do() {
      var game = Graphics_Phaser.create(Option.fromRecordAny(Option.fromRecordOptionCons({
          reflectSymbol: function () {
              return "height";
          }
      })(Option.fromRecordOptionCons({
          reflectSymbol: function () {
              return "physics";
          }
      })(Option.fromRecordOptionCons({
          reflectSymbol: function () {
              return "width";
          }
      })(Option.fromRecordOptionNil)()()())()()())()()())(Option.fromRecordRequiredNil)()()())({
          width: 800.0,
          height: 600.0,
          physics: Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons({
              reflectSymbol: function () {
                  return "arcade";
              }
          })(Option.fromRecordOptionCons({
              reflectSymbol: function () {
                  return "default";
              }
          })(Option.fromRecordOptionNil)()()())()()())(Option.fromRecordRequiredNil)()()())({
              "default": "arcade",
              arcade: Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons({
                  reflectSymbol: function () {
                      return "debug";
                  }
              })(Option.fromRecordOptionCons({
                  reflectSymbol: function () {
                      return "gravity";
                  }
              })(Option.fromRecordOptionNil)()()())()()())(Option.fromRecordRequiredNil)()()())({
                  gravity: Option.fromRecord(Option.fromRecordAny(Option.fromRecordOptionCons({
                      reflectSymbol: function () {
                          return "y";
                      }
                  })(Option.fromRecordOptionNil)()()())(Option.fromRecordRequiredNil)()()())({
                      y: 300.0
                  }),
                  debug: false
              })
          })
      })();
      return Graphics_Phaser_SceneManager.addScene(Option.fromRecordAny(Option.fromRecordOptionCons({
          reflectSymbol: function () {
              return "create";
          }
      })(Option.fromRecordOptionCons({
          reflectSymbol: function () {
              return "preload";
          }
      })(Option.fromRecordOptionCons({
          reflectSymbol: function () {
              return "update";
          }
      })(Option.fromRecordOptionNil)()()())()()())()()())(Option.fromRecordRequiredNil)()()())("scene 1")({
          create: create,
          preload: preload,
          update: update
      })(Graphics_Phaser_SceneManager.Start.value)(game)();
  });
  exports["main"] = main;
  exports["basePath"] = basePath;
  exports["preload"] = preload;
  exports["create"] = create;
  exports["createAnimations"] = createAnimations;
  exports["createBg"] = createBg;
  exports["createGround"] = createGround;
  exports["createPlatform"] = createPlatform;
  exports["createPlayer"] = createPlayer;
  exports["createStars"] = createStars;
  exports["update"] = update;
  exports["move"] = move;
  exports["moveRight"] = moveRight;
  exports["moveLeft"] = moveLeft;
  exports["jump"] = jump;
  exports["stop"] = stop;
  exports["getPlayer"] = getPlayer;
  exports["getPlatform"] = getPlatform;
  exports["collectStar"] = collectStar;
})(PS);
PS["Main"].main();